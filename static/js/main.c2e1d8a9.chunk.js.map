{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","data-bs-theme","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","concat","onClick","toggleMode","role","htmlFor","Textform","text","setText","useState","Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","handleUpClick","newText","toUpperCase","showAlert","handleLowClick","toLowerCase","capitalize","q","f","split","i","length","charAt","slice","copy","console","log","clear","Alert","alert","word","lower","msg","App","setMode","setAlert","message","setTimeout","abouttext","document","body","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.c2e1d8a9.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className=\"navbar  navbar-expand-lg  bg-body-tertiary\" data-bs-theme={props.mode}>\r\n    <div className=\"container-fluid\">\r\n      <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n          <li className=\"nav-item\">\r\n            <a href=\"#\" className=\"nav-link active\" aria-current=\"page\" >Home</a>\r\n          </li>\r\n          {/* <li className=\"nav-item\">\r\n            <a href=\"/about\" className=\"nav-link\" >{props.abouttext}</a>\r\n          </li> */}\r\n          \r\n        </ul>\r\n        {/* <form className=\"d-flex\" role=\"search\">\r\n          <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n          <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n        </form> */}\r\n        <div className={`form-check form-switch   text-${props.mode===\"light\"?\"dark\":\"light\"}`}   >\r\n  <input className=\"form-check-input \"  onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\"  htmlFor=\"flexSwitchCheckDefault\" >Enable Dark Mode</label>\r\n</div>\r\n      </div>\r\n    </div>\r\n  </nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = { title : PropTypes.string,\r\n                abouttext : PropTypes.string.isRequired\r\n}\r\n\r\n","import React from 'react'\r\nimport {useState} from 'react';\r\n\r\n\r\n\r\nexport default function Textform(props) {\r\n    const handleUpClick=()=>{\r\n        \r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"converted to uppercase\" , \"success\")\r\n    }\r\n    const handleOnChange=(event)=>{\r\n       setText(event.target.value)\r\n    }\r\n\r\n    const handleLowClick=()=>{\r\n        \r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"converted to lowercase\" , \"success\")\r\n    }\r\n    const capitalize=()=>{\r\n        let q = \"\";\r\n        let f = text.split(\" \");\r\n        for(let i =0;i<f.length;i++){\r\n            let t = f[i].charAt(0).toUpperCase();\r\n            let w = f[i].slice(1);\r\n            let y = t+w;\r\n             q = q +\" \"+ y;\r\n            let newText = q\r\n            setText(newText)\r\n        }\r\n        props.showAlert(\"first letters are capitalized\" , \"success\")\r\n    \r\n    }\r\n\r\n    const copy=()=>{\r\n        \r\n        let newText=text+\" \"+text.slice(0)\r\n        console.log(newText)\r\n        setText(newText);\r\n        props.showAlert(\"text is copied\" , \"success\")\r\n    }\r\n    const clear=()=>{\r\n        setText(\"\")\r\n        props.showAlert(\"text is cleared\" , \"success\")\r\n    }\r\n\r\n    \r\n    const [text, setText] =  useState('');\r\n    \r\n    return (\r\n        <>\r\n        \r\n        <div className=\"container\">\r\n         <h1  style={{color:props.mode===\"light\"?\"black\":\"white\"}}>{props.heading} </h1>\r\n            <div className=\"mb-3\">\r\n                \r\n                <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode===\"light\"?\"\":\"#343a40\" , color: props.mode===\"light\"?\"black\":\"white\"}} id=\"mybox\" rows=\"8\"></textarea>\r\n                    \r\n            </div>\r\n            <button className=\"btn btn-primary mx-2\" style={{color:props.mode===\"light\"?\"black\":\"white\"}} onClick={handleUpClick}>convert to uppercase</button>\r\n            <button className=\"btn btn-primary mx-4\" style={{color:props.mode===\"light\"?\"black\":\"white\"}} onClick={handleLowClick}>convert to lowercase</button>\r\n            <button className=\"btn btn-primary mx-2\" style={{color:props.mode===\"light\"?\"black\":\"white\"}} onClick={capitalize}>convert first letters to capital</button>\r\n            <button className=\"btn btn-primary mx-2\" style={{color:props.mode===\"light\"?\"black\":\"white\"}} onClick={copy}>copy text</button>\r\n            <button className=\"btn btn-primary mx-2\" style={{color:props.mode===\"light\"?\"black\":\"white\"}} onClick={clear}>clear text</button>\r\n        </div>\r\n        <div className={`container my-3  text-${props.mode===\"light\"?\"dark\":\"light\"}`}>\r\n            <h2>Your text summary</h2>\r\n            <p>{text.split(\" \").length} words, {text.length} characters</p>\r\n            <p>{0.008*text.split(\" \").length} minutes read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0? text:\"Enter some text to preview\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize=(word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1)\r\n    }\r\n    return (\r\n        props.alert&&<div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n           <strong> {capitalize(props.alert.type)}</strong> :{props.alert.msg}\r\n            \r\n        </div>\r\n    )\r\n}\r\n","// import logo from './logo.svg';\nimport React, { useState } from 'react';\nimport './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport Textform from './components/Textform';\nimport Alert from './components/Alert';\n\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n  \n// } from \"react-router-dom\";\n\n\nfunction App() {\n  let [mode, setMode] = useState(\"light\");\n  const [alert,setAlert] = useState(null);\n\n  const showAlert=(message,type)=>{\n    setAlert({\n      msg:message,\n      type:type,\n   })\n\n   setTimeout(()=>{\n        setAlert(null)\n   } , 2000)\n  }\n\n  const toggleMode=()=>{\n     if(mode===\"light\"){\n      setMode(\"dark\")\n      document.body.style.backgroundColor=\"#073e75\";\n      showAlert(\"Dark mode is enabled\" , \"success\")\n      document.title = \"Text converter - dark mode\"\n      \n\n     }\n     else{\n      setMode(\"light\")\n      document.body.style.backgroundColor=\"white\";\n      showAlert(\"Light mode is enabled\" , \"success\")\n      document.title = \"Text converter - light mode\"\n     }\n  }\n\n  \n  return (\n    \n     <>\n     \n     {/* <Router> */}\n     <Navbar title=\"text\" abouttext=\"About\" mode={mode}  toggleMode = {toggleMode}></Navbar>\n     \n     <Alert alert={alert}></Alert>\n        \n     <div className=\"container my-3\" >\n     {/* <Routes>\n          <Route path=\"about\" element={<About/>}>\n            \n          </Route> */}\n         \n          {/* <Route path=\"/\"  element={ <Textform heading=\"Enter your text\" mode={mode}  showAlert={showAlert}></Textform>}> */}\n          <Textform heading=\"Enter your text\" mode={mode}  showAlert={showAlert}></Textform>\n         \n          {/* </Route>\n        </Routes> */}\n        </div>\n     {/* </Router> */}\n       \n   \n\n\n      \n     \n     \n     \n     \n  \n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}